@page "/shoppinglistitem/instorelist"
@page  "/shoppinglistitem/instorelist/{ShoppingListID:int}"

@using ShoppingListBlazorWasm.Shared
@using ShoppingListBlazorWasm.Client.Data
@inject ShoppingListClient Client

<h3>Shopping List In Store</h3>

<div class="form-actions no-color esh-link-list" style="padding-bottom: 20px; font-size: 18px;">
    <a href="@($"/shoppinglistitem/additem/{ShoppingListID}")" class="esh-link-item">
        Create
    </a>
    |
    <a href="@($"/shoppinglistitem/displaylist/0/{ShoppingListID}")" class="esh-link-item">
        Display Items
    </a>
</div>

@if (shoppingLists == null)
{
    <p><em>Loading...</em></p>
}
else if (!shoppingLists.Any())
{
    <p><em>There are currently no shopping lists</em></p>
}
else
{
    <div style="padding-bottom: 20px">
        <select id="ShoppingListID" name="ShoppingListID" @onchange=@ShoppingListSelected>
            <option value="0" selected>Please Select a Shopping List</option>
            @foreach (var shoppingList in shoppingLists)
            {
                if (shoppingList.ShoppingListID == ShoppingListID)
                {
                    <option value="@shoppingList.ShoppingListID" selected>@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
                else
                {
                    <option value="@shoppingList.ShoppingListID">@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
            }
        </select>
    </div>

    @if (ShoppingListID > 0)
    {
        @if (shoppingListItems == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!shoppingListItems.Any())
        {
            <p><em>There are currently no shopping list items</em></p>
        }
        else
        {
            <table>
                <tr>
                    <td>
                        <label style="font-size: 30px; font-weight: bold;">@inStoreMessage</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label style="font-size: 22px;">@itemsPickedCountMessage</label>
                    </td>
                </tr>
            </table>


            <table style="font-size: 24px;">
                <tr>
                    <th style="width: 300px;">
                        Item
                    </th>
                    <th style="width: 75px; text-align: center;">
                        Qty
                    </th>
                    <th></th>
                </tr>
                @foreach (var shoppingListItem in shoppingListItems)
                {
                    <tr style="@(shoppingListItem.ItemPicked || shoppingListItem.Quantity == 0 ? "text-decoration: line-through; opacity: 0.6;" : "")">
                        <td>
                            @shoppingListItem.ItemName
                        </td>
                        <td style="text-align: center;">
                            @shoppingListItem.Quantity
                        </td>
                        <td>
                            @if (shoppingListItem.ItemPicked)
                            {
                                <input type=checkbox @onchange="(() => PickShoppingItem(shoppingListItem.ShoppingListItemID))" checked />
                            }
                            else
                            {
                                <input type=checkbox @onchange="(() => PickShoppingItem(shoppingListItem.ShoppingListItemID))" />
                            }
                        </td>
                    </tr>
                }
            </table>
        }
    }
}

@code {
    [Parameter]
    public int ShoppingListID { get; set; }

    private List<ShoppingList> shoppingLists;
    private List<ShoppingListItem> shoppingListItems;
    private ShoppingListItem shoppingListItem = new ShoppingListItem();
    private string inStoreMessage;
    private string itemsPickedCountMessage;

    protected override async Task OnInitializedAsync()
    {
        shoppingLists = await Client.GetShoppingLists();

        shoppingLists = shoppingLists.Where(x => x.NumberOfItems > 0).OrderBy(x => x.ShoppingDate).ToList();

        await RefreshShoppingListItems();
    }

    private async Task ShoppingListSelected(ChangeEventArgs e)
    {
        ShoppingListID = Convert.ToInt32(e.Value.ToString());

        await RefreshShoppingListItems();
    }

    private async Task PickShoppingItem(int shoppingListItemID)
    {
        var shoppingListItemToUpdate = shoppingListItems.First(x => x.ShoppingListItemID == shoppingListItemID);

        if (shoppingListItemToUpdate != null)
        {
            shoppingListItemToUpdate.ItemPicked = !shoppingListItemToUpdate.ItemPicked;
        }

        await Client.UpdateShoppingListItem(shoppingListItemToUpdate);

        await RefreshShoppingListItems();
    }

    private async Task RefreshShoppingListItems()
    {
        if (ShoppingListID > 0)
        {
            shoppingListItems = await Client.GetShoppingListItems(ShoppingListID);

            shoppingListItems = shoppingListItems.Where(x => x.Quantity > 0).OrderBy(x => x.InStorePosition).ToList();

            inStoreMessage = shoppingListItems.All(x => x.ItemPicked) ? "Go to checkouts" : "In Shop";

            int numberOfItemsInList = shoppingListItems.Count;
            int numberOfItemsPicked = shoppingListItems.Where(x => x.ItemPicked).Count();

            itemsPickedCountMessage = $"{numberOfItemsPicked}/{numberOfItemsInList} items picked";
        }
    }
}
