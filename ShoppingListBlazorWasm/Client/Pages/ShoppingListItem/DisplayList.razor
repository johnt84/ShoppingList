@page "/shoppinglistitem/displaylist"
@page  "/shoppinglistitem/displaylist/{ShoppingListItemID:int}"
@page  "/shoppinglistitem/displaylist/0/{ShoppingListID:int}"

@using ShoppingListBlazorWasm.Shared
@using ShoppingListBlazorWasm.Client.Data
@inject ShoppingListClient Client

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>

<h3>Shopping List Items Maintenance</h3>

<div class="form-actions no-color esh-link-list" style="padding-bottom: 20px; font-size: 18px;">
    <a href="@($"/shoppinglistitem/additem/{ShoppingListID}")" class="esh-link-item">
        Create
    </a>
    |
    <a href="@($"/shoppinglistitem/instorelist/{ShoppingListID}")" class="esh-link-item">
        In Store List
    </a>
</div>

@if (shoppingLists == null)
{
    <p><em>Loading...</em></p>
}
else if (!shoppingLists.Any())
{
    <p><em>There are currently no shopping lists</em></p>
}
else
{
    <div style="padding-bottom: 20px">
        <select id="ShoppingListID" name="ShoppingListID" @onchange=@ShoppingListSelected>
            <option value="0" selected>Please Select a Shopping List</option>
            @foreach (var shoppingList in shoppingLists)
            {
                if (shoppingList.ShoppingListID == ShoppingListID)
                {
                    <option value="@shoppingList.ShoppingListID" selected>@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
                else
                {
                    <option value="@shoppingList.ShoppingListID">@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
            }
        </select>
    </div>

    @if (ShoppingListID > 0)
    {
        @if (shoppingListItems == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!shoppingListItems.Any())
        {
            <p><em>There are currently no shopping list items</em></p>
        }
        else
        {
            <label style="font-size: 20px;">Search Items:</label>
            <input style="font-size: 20px; margin-left: 10px;" @oninput="SearchItemsChanged" />

            <label style="font-size: 20px; margin-left: 70px;">In Store View:</label>
            <input style="font-size: 20px; margin-left: 10px;" id="chkShowInStoreView" type="checkbox"@onchange="@(() => ShowInStoreView())" />
            
            <table class="table-hover" style="font-size: 18px;">
                <tr>
                    <th class="sort-th" @onclick="@(() => SortTable("ItemName"))" style="width: 171px;">
                        Item
                        <span class="fa @(SetSortIcon("ItemName"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("Price"))" style="width: 72px; text-align: center;">
                        Price
                        <span class="fa @(SetSortIcon("Price"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("Quantity"))" style="width: 40px; text-align: center;">
                        Qty
                        <span class="fa @(SetSortIcon("Quantity"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("ItemCost"))" style="width: 100px; text-align: center;">
                        Item Cost
                        <span class="fa @(SetSortIcon("ItemCost"))"></span>
                    </th>
                    <th class="sort-th" @onclick="@(() => SortTable("InStorePosition"))" style="width: 100px; text-align: center;">
                        In Store Position
                        <span class="fa @(SetSortIcon("InStorePosition"))"></span>
                    </th>
                    <th style="width: 81px;"></th>
                    <th style="width: 53px;"></th>
                    <th style="width: 53px;"></th>
                    <th style="width: 84px;"></th>
                </tr>
                @foreach (var shoppingListItem in shoppingListItems)
                {
            <tr>
                <td>
                    @shoppingListItem.ItemName
                </td>
                <td style="text-align: center">
                    @shoppingListItem.Price
                </td>
                <td style="text-align: center">
                    @shoppingListItem.Quantity
                </td>
                <td style="text-align: center">
                    @(shoppingListItem.Price * @shoppingListItem.Quantity)
                </td>
                <td style="text-align: center">
                    @shoppingListItem.InStorePosition
                </td>
                <td>
                    <a href="@($"shoppinglistitem/displayitem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                        Display
                    </a>
                </td>
                <td>
                    <a href="@($"shoppinglistitem/edititem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                        Edit
                    </a>
                </td>
                <td>
                    @if (shoppingListItem.Quantity > 0)
                    {
                        <a href="@($"shoppinglistitem/moveitem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                            Move
                        </a>
                    }
                </td>
                <td>
                    <a href="@($"shoppinglistitem/deleteitem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                        Delete
                    </a>
                </td>
            </tr>
                }
                <tr>
                    <td style="font-weight: bold;">
                        Total Cost
                    </td>
                    <td style="font-weight: bold; text-align: center;">
                        @shoppingListItems.Sum(x => x.Price * x.Quantity)
                    </td>
                </tr>
            </table>
        }
    }
}

@code {
    [Parameter]
    public int ShoppingListItemID { get; set; }

    [Parameter]
    public int ShoppingListID { get; set; }

    private List<ShoppingList> shoppingLists;
    private List<ShoppingListItem> shoppingListItems;
    private ShoppingListItem shoppingListItem = new ShoppingListItem();
    private string shoppingListItemSearch;
    private bool isSortedAscending;
    private string activeSortColumn;
    private bool inStoreView;

    protected override async Task OnInitializedAsync()
    {
        shoppingLists = await Client.GetShoppingLists();

        shoppingLists = shoppingLists.OrderBy(x => x.ShoppingDate).ToList();

        if (ShoppingListItemID > 0)
        {
            var shoppingListItem = await Client.GetShoppingListItem(ShoppingListItemID);
            ShoppingListID = shoppingListItem?.ShoppingListID ?? 0;
        }

        await RefreshShoppingListItems();
    }

    private async Task ShoppingListSelected(ChangeEventArgs e)
    {
        ShoppingListID = Convert.ToInt32(e.Value.ToString());

        await RefreshShoppingListItems();
    }

    private async Task SearchItemsChanged(ChangeEventArgs e)
    {
        shoppingListItemSearch = e.Value.ToString();

        await RefreshShoppingListItems();

        if (!string.IsNullOrEmpty(shoppingListItemSearch))
        {
            var searchShoppingListItems = shoppingListItems
                                            .Where(x => x.ItemName.ToLower().Contains(shoppingListItemSearch.ToLower())
                                                || x.Quantity.ToString().ToLower().Contains(shoppingListItemSearch.ToLower())
                                                || x.Price.ToString().ToLower().Contains(shoppingListItemSearch.ToLower())
                                                || x.ItemCost.ToString().ToLower().Contains(shoppingListItemSearch.ToLower())
                                                || x.InStorePosition.ToString().ToLower().Contains(shoppingListItemSearch.ToLower()))
                                            .OrderBy(x => x.ItemName)
                                            .ToList();

            shoppingListItems = searchShoppingListItems.Count > 0 ? searchShoppingListItems : shoppingListItems;
        }
    }

    private async Task ShowInStoreView()
    {
        inStoreView = !inStoreView;

        await RefreshShoppingListItems();
    }

    private async Task SortTable(string columnName)
    {
        await RefreshShoppingListItems();

        bool clickedSameColumn = columnName == activeSortColumn;

        isSortedAscending = clickedSameColumn ? !isSortedAscending : true;

        if (isSortedAscending)
        {
            shoppingListItems = shoppingListItems
                                    .OrderBy(x => x.GetType().GetProperty(columnName)
                                    .GetValue(x, null))
                                    .ToList();
        }
        else
        {
            shoppingListItems = shoppingListItems
                                    .OrderByDescending(x => x.GetType().GetProperty(columnName)
                                    .GetValue(x, null))
                                    .ToList();
        }

        activeSortColumn = columnName;
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }

        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private async Task RefreshShoppingListItems()
    {
        if(ShoppingListID > 0)
        {
            shoppingListItems = await Client.GetShoppingListItems(ShoppingListID);

            if (inStoreView)
            {
                shoppingListItems = shoppingListItems
                                        .Where(x => x.Quantity > 0)
                                        .OrderBy(x => x.InStorePosition)
                                        .ToList();
            }
            else
            {
                shoppingListItems = shoppingListItems.OrderBy(x => x.ItemName).ToList();
            }
        }
    }
}
