@page "/shoppinglistitem/displaylist"
@page  "/shoppinglistitem/displaylist/{ShoppingListItemID:int}"
@page  "/shoppinglistitem/displaylist/0/{ShoppingListID:int}"

@using ShoppingListBlazorWasm.Shared
@using ShoppingListBlazorWasm.Client.Data
@inject ShoppingListClient Client

<h3>Shopping List</h3>

<div class="form-actions no-color esh-link-list" style="padding-bottom: 20px">
    <a href="@($"/shoppinglistitem/additem/{ShoppingListID}")" class="esh-link-item">
        Create
    </a>
</div>

@if (shoppingLists == null)
{
    <p><em>Loading...</em></p>
}
else if (!shoppingLists.Any())
{
    <p><em>There are currently no shopping lists</em></p>
}
else
{
    <div style="padding-bottom: 20px">
        <select id="ShoppingListID" name="ShoppingListID" @onchange=@ShoppingListSelected>
            <option value="0" selected>Please Select a Shopping List</option>
            @foreach (var shoppingList in shoppingLists)
            {
                if (shoppingList.ShoppingListID == ShoppingListID)
                {
                    <option value="@shoppingList.ShoppingListID" selected>@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
                else
                {
                    <option value="@shoppingList.ShoppingListID">@shoppingList.ShoppingDate.ToString("dd MMM yyyy")</option>
                }
            }
        </select>
    </div>

    @if (ShoppingListID > 0)
    {
        @if (shoppingListItems == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!shoppingListItems.Any())
        {
            <p><em>There are currently no shopping list items</em></p>
        }
        else
        {
            <table>
                <tr>
                    <th>
                        Item
                    </th>
                    <th>
                        Price
                    </th>
                    <th>
                        Qty
                    </th>
                    <th>
                        Item Cost
                    </th>
                    <th>
                        Picked
                    </th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
                @foreach (var shoppingListItem in shoppingListItems)
                {
                    <tr style="@(shoppingListItem.ItemPicked || shoppingListItem.Quantity == 0 ? "text-decoration: line-through" : "")">
                        <td>
                            @shoppingListItem.ItemName
                        </td>
                        <td>
                            @shoppingListItem.Price
                        </td>
                        <td>
                            @shoppingListItem.Quantity
                        </td>
                        <td>
                            @(shoppingListItem.Price * @shoppingListItem.Quantity)
                        </td>
                        <td>
                            @if (shoppingListItem.ItemPicked)
                            {
                                <input type=checkbox @onchange="(() => PickShoppingItem(shoppingListItem.ShoppingListItemID))" checked />
                            }
                            else
                            {
                                <input type=checkbox @onchange="(() => PickShoppingItem(shoppingListItem.ShoppingListItemID))" />
                            }
                        </td>
                        <td>
                            <a href="@($"shoppinglistitem/displayitem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                                Display
                            </a>
                        </td>
                        <td>
                            <a href="@($"shoppinglistitem/edititem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                                Edit
                            </a>
                        </td>
                        <td>
                            <a href="@($"shoppinglistitem/deleteitem/{shoppingListItem.ShoppingListItemID}")" class="esh-table-link">
                                Delete
                            </a>
                        </td>
                    </tr>
                }
                <tr>
                    <td style="font-weight: bold;">
                        Total Cost
                    </td>
                    <td style="font-weight: bold;">
                        @shoppingListItems.Sum(x => x.Price * x.Quantity)
                    </td>
                </tr>
            </table>
        }
    }
}

@code {
    [Parameter]
    public int ShoppingListItemID { get; set; }

    [Parameter]
    public int ShoppingListID { get; set; }

    protected List<ShoppingList> shoppingLists;
    protected List<ShoppingListItem> shoppingListItems;
    protected ShoppingListItem shoppingListItem = new ShoppingListItem();

    protected override async Task OnInitializedAsync()
    {
        shoppingLists = await Client.GetShoppingLists();

        if (ShoppingListItemID > 0)
        {
            var shoppingListItem = await Client.GetShoppingListItem(ShoppingListItemID);
            ShoppingListID = shoppingListItem?.ShoppingListID ?? 0;
            shoppingListItems = await Client.GetShoppingListItems(ShoppingListID);
        }
        else if(ShoppingListID > 0)
        {
            shoppingListItems = await Client.GetShoppingListItems(ShoppingListID);
        }
    }

    protected async Task ShoppingListSelected(ChangeEventArgs e)
    {
        ShoppingListID = Convert.ToInt32(e.Value.ToString());

        shoppingListItems = await Client.GetShoppingListItems(ShoppingListID);
    }

    private async Task PickShoppingItem(int shoppingListItemID)
    {
        var shoppingListItemToUpdate = shoppingListItems.First(x => x.ShoppingListItemID == shoppingListItemID);

        if (shoppingListItemToUpdate != null)
        {
            shoppingListItemToUpdate.ItemPicked = !shoppingListItemToUpdate.ItemPicked;
        }

        await Client.UpdateShoppingListItem(shoppingListItemToUpdate);
    }
}
